{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cloth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pinholes","paths","x","abs_y","Math","sqrt","pow","y","dx","random","dy","push","i","path","j","floor","length","ctx","refs","canvas","getContext","midX","width","midY","height","radius","min","fillStyle","beginPath","arc","PI","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","pinhole","value","err","return","getRandomColor","color","lineWidth","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","strokeStyle","begin","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","pathIndex","point","moveTo","lineTo","stroke","style","background","react_default","a","createElement","ref","React","Component","App","App_Cloth","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efb76fd5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Cloth extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pinholes: [],\n            paths: [],\n        }\n    \n        var dr = 0.03;\n        var r = 0.94;\n        for(var x=-r; x<=r; x+=dr) {\n            var abs_y = Math.sqrt(Math.pow(r, 2) - Math.pow(x, 2));\n            for(var y=-abs_y; y<abs_y; y+=dr) {\n                var dx = 0.001 * (Math.random() - 0.5);\n                var dy = 0.001 * (Math.random() - 0.5);\n                this.state.pinholes.push({x: x + dx, y: y + dy});\n            }\n        }\n\n        for(var i=0; i<3; i++) {\n            var path = [];\n            for(var j=0; j<30; j++) {\n                path.push(Math.floor(Math.floor(Math.random() * this.state.pinholes.length)));\n            }\n            this.state.paths.push(path);\n        }\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n\n        const midX = this.props.width / 2;\n        const midY = this.props.height / 2;\n        const radius = Math.min(midX, midY);\n\n        ctx.fillStyle = '#c19a6b';\n        ctx.beginPath();\n        ctx.arc(midX, midY, radius, 0, 2 * Math.PI);\n        ctx.fill();\n\n        ctx.fillStyle = '#F1F1D4';\n        ctx.beginPath();\n        ctx.arc(midX, midY, radius * 0.95, 0, 2 * Math.PI);\n        ctx.fill();\n\n        for(var pinhole of this.state.pinholes) {\n            ctx.fillStyle = 'rgba(255,255,255,0.9)';\n            ctx.beginPath();\n            ctx.arc(midX + radius * pinhole.x, midY + radius * pinhole.y, 1, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n\n        function getRandomColor() {\n          var letters = '0123456789ABCDEF';\n          var color = '#';\n          for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n          }\n          return color;\n        }\n\n        ctx.lineWidth = 1.5;\n        for(var path of this.state.paths) {\n            ctx.strokeStyle = getRandomColor();\n            ctx.beginPath();\n            var begin=true\n\n            for(var pathIndex of path) {\n                var point = this.state.pinholes[pathIndex];\n                var x = midX + radius * point.x;\n                var y = midY + radius * point.y;\n                if(begin) {\n                    ctx.moveTo(x, y);\n                    begin=false;\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n        }\n    }\n\n    render() {\n        var style = { \n            background: this.props.background || \"white\"\n        };\n        var canvas = <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} style={style}></canvas>;\n        return canvas;\n    }\n}\n\nfunction App() {\n  return (\n    <Cloth width=\"64\" height=\"64\" />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}