{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getQueryVariable","variable","vars","window","location","search","substring","split","i","length","pair","decodeURIComponent","Cloth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","threadCount","pinholes","getPinholes","neighbours","getPinholeNeighbours","state","pinholeNeighbours","paths","width","height","resizeListener","undefined","numThreads","nthreads","numCurves","ncurves","speed","frame","then","performance","now","handleClick","bind","assertThisInitialized","output","row","x","j","y","dx","Math","random","dy","push","l","neighbour_row","neighbour","_this2","setState","generatePaths","goalX","floor","_this3","thread_index","needleIndex","getRandomPinhole","path","thread_goal_iter","goalIndex","goalPath","getPathBetweenPoints","concat","color","getRandomColor","show","draw","goal","_this4","reduce","o","v","ph","dist_to_goal","sqrt","pow","index_a","index_b","next","getNextPinhole","_this5","el","refs","canvas","par","parentElement","elStyle","getComputedStyle","style","clientHeight","clientWidth","parseFloat","paddingTop","paddingBottom","paddingLeft","paddingRight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","min","ctx","getContext","midX","midY","radius","fillStyle","beginPath","rect","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","pinhole","value","arc","PI","err","return","renderThreads","lineWidth","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","strokeStyle","begin","L","start","stop","subpaths","slice","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","pathIndex","point","moveTo","lineTo","stroke","_this6","addEventListener","resize","tick","removeEventListener","cancelAnimationFrame","animFunc","_this7","requestAnimationFrame","react_default","a","createElement","ref","onClick","border","boxSizing","borderRadius","React","Component","App","_this8","change_nthreads","change_ncurves","change_threadCount","change_speed","cloth","event","_this9","target","_this10","_this11","regenerate","_this12","className","App_Cloth","float","type","max","onChange","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.195fee95.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nfunction getQueryVariable(variable) {\n    var query = window.location.search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) === variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n}\n\nclass Cloth extends React.Component {\n    getPinholes(threadCount) {\n        const r = 1;\n        var output = [];\n        for(var i=0; i<=threadCount; i++) {\n            var row = [];\n            var x = ( 2 * i / threadCount - 1) * r;\n            for(var j=0; j<=threadCount; j++) {\n                var y = ( 2 * j / threadCount - 1) * r;\n                var dx = 0.002 * (Math.random() - 0.5);\n                var dy = 0.002 * (Math.random() - 0.5);\n                row.push({x: x + dx, y: y + dy});\n            }\n            output.push(row);\n        }\n        return output;\n    }\n\n    getPinholeNeighbours(pinholes) {\n        var l = pinholes.length; \n        var neighbours = [];\n        for(var i=0; i<=l; i++) {\n            var neighbour_row = [];\n            for(var j=0; j<=l; j++) {\n                var neighbour = [];\n                if(i > 0) {\n                    neighbour.push([i-1, j]);\n                    /*if(j + 1 < l)\n                        neighbour.push([i-1, j+1]);\n\n                    if(j - 1 > 0)\n                        neighbour.push([i-1, j-1]);\n                    */\n                }\n\n                if(i + 1 < l) {\n                    neighbour.push([i+1, j]);\n                    /*\n                    if(j + 1 < l)\n                        neighbour.push([i+1, j+1]);\n\n                    if(j - 1 > 0)\n                        neighbour.push([i+1, j-1]);\n                    */\n\n                }\n\n                if(j > 0)\n                    neighbour.push([i, j-1]);\n\n                if(j + 1 < l)\n                    neighbour.push([i, j+1]);\n                neighbour_row.push(neighbour)\n            }\n            neighbours.push(neighbour_row);\n        }\n        return neighbours;\n    }\n\n    regenerate() {\n        const threadCount = this.state.threadCount;\n        var pinholes = this.getPinholes(threadCount);\n        var neighbours = this.getPinholeNeighbours(pinholes);\n        this.setState({\n            pinholes: pinholes,\n            pinholeNeighbours: neighbours\n        }, () => {\n            this.generatePaths();\n        });\n    }\n\n    constructor(props) {\n        super(props)\n        var threadCount = getQueryVariable(\"threadCount\") || this.props.threadCount || 400;\n        var pinholes = this.getPinholes(threadCount);\n        var neighbours = this.getPinholeNeighbours(pinholes);\n\n        this.state = {\n            pinholes: pinholes,\n            pinholeNeighbours: neighbours,\n            paths: [],\n            width: 64,\n            height: 64,\n            resizeListener: undefined,\n            threadCount: threadCount,\n            numThreads: getQueryVariable(\"nthreads\") || this.props.nthreads || 5,\n            numCurves: getQueryVariable(\"ncurves\") || this.props.ncurves || 5,\n            speed: getQueryVariable(\"speed\") || this.props.speed || 64,\n            frame: 0,\n            then: performance.now()\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.generatePaths();\n    }\n\n    getRandomPinhole() {\n        var goalX = Math.floor(Math.random() * this.state.pinholes.length);\n        var goalY = Math.floor(Math.random() * this.state.pinholes[goalX].length);\n        return [goalX, goalY];\n    }\n\n    generatePaths() {\n        var paths = [];\n        for(var thread_index=0; thread_index<this.state.numThreads; thread_index++) {\n            var needleIndex = this.getRandomPinhole();\n            var path = [needleIndex];\n            for(var thread_goal_iter=0; thread_goal_iter<this.state.numCurves; thread_goal_iter++) {\n                var goalIndex = this.getRandomPinhole();\n                var goalPath = this.getPathBetweenPoints(needleIndex, goalIndex);\n                path = path.concat(goalPath);\n                needleIndex = goalIndex;\n            }\n            goalIndex = path[0];\n            goalPath = this.getPathBetweenPoints(needleIndex, goalIndex);\n            path = path.concat(goalPath);\n\n            paths.push({\n                path: path,\n                color: this.getRandomColor(),\n                show: Math.random()\n            });\n        }\n\n        this.setState({\n            paths: paths\n        }, () => this.draw());\n    }\n\n    getNextPinhole(i, goal) {\n        var min = this.state.pinholeNeighbours[i[0]][i[1]].reduce((o, v) => {\n            var ph = this.state.pinholes[v[0]][v[1]];\n            var dist_to_goal = Math.sqrt(Math.pow(ph.x - goal.x, 2) + Math.pow(ph.y - goal.y, 2));\n            if(dist_to_goal < o[0])\n                return [dist_to_goal, v];\n            else\n                return o;\n        }, [100000, undefined]);\n        return min[1];\n    }\n\n    getPathBetweenPoints(index_a, index_b) {\n        var output = [index_a];\n        var goal = this.state.pinholes[index_b[0]][index_b[1]];\n        var next = index_a;\n\n        while(true) {\n            next = this.getNextPinhole(next, goal); \n            if(next[0] === index_b[0] && next[1] === index_b[1])\n                break;\n            output.push(next);\n        }\n\n        output.push(index_b);\n        return output;\n    }\n\n    getRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n\n    resize() {\n        var el = this.refs.canvas;\n        var par = this.refs.canvas.parentElement;\n        var elStyle = window.getComputedStyle(el, null);\n        var style = window.getComputedStyle(par, null);\n        var height = par.clientHeight;  // height with padding\n        var width = par.clientWidth;   // width with padding\n\n        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n        height -= parseFloat(elStyle.borderTopWidth) + parseFloat(elStyle.borderBottomWidth);\n        width -= parseFloat(elStyle.borderLeftWidth) + parseFloat(elStyle.borderRightWidth);\n\n        var min = Math.min(width, height);\n        this.setState({\n            width: min,\n            height: min, \n        }, () => this.draw())\n    }\n\n    draw() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n        const midX = this.state.width / 2;\n        const midY = this.state.height / 2;\n        const radius = Math.min(midX, midY);\n        const threadCount = this.state.threadCount;\n\n        ctx.fillStyle = '#c19a6b';\n        ctx.fillStyle = '#F1F1D4';\n        ctx.beginPath();\n        ctx.rect(midX - radius, midY - radius, 2 * radius, 2 * radius);\n        ctx.fill();\n\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\n        for(var i=0; i<this.state.pinholes.length; i++) {\n            var row = this.state.pinholes[i];\n            for(var pinhole of row) {\n                var x = midX + radius * pinhole.x;\n                var y = midY + radius * pinhole.y;\n                ctx.beginPath();\n                ctx.arc(x, y, radius / threadCount, 0, 2 * Math.PI);\n                ctx.fill();\n            }\n        }\n        this.renderThreads();\n    }\n\n    renderThreads() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n        const midX = this.state.width / 2;\n        const midY = this.state.height / 2;\n        const radius = Math.min(midX, midY);\n        const threadCount = this.state.threadCount;\n        const frame = this.state.frame;\n\n        ctx.lineWidth = radius * 1.5 / threadCount;\n        for(var path of this.state.paths) {\n            ctx.strokeStyle = path.color;\n            \n            ctx.beginPath();\n            var begin=true\n            var l = path.path.length;\n            var L = path.show * l;\n            var start = (frame % l);\n            var stop = start + L;\n\n            var subpaths = path.path.slice(start, stop);\n            if(stop > l) {\n                subpaths = subpaths.concat(path.path.slice(0, stop - l))\n            }\n            for(var pathIndex of subpaths) {\n                var point = this.state.pinholes[pathIndex[0]][pathIndex[1]];\n                var x = midX + radius * point.x;\n                var y = midY + radius * point.y;\n                if(begin) {\n                    ctx.moveTo(x, y);\n                    begin=false;\n                } else {\n                    ctx.lineTo(x, y);\n                    begin=true;\n                }\n            }\n            ctx.stroke();\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            resizeListener: window.addEventListener(\"resize\", () => this.resize())\n        });\n        this.generatePaths();\n        this.resize();\n        this.tick();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.state.resizeListener);\n        cancelAnimationFrame(this.animFunc);\n    };\n\n    tick() {\n        this.animFunc = requestAnimationFrame(() => this.tick());\n        var now = performance.now()\n        const then = this.state.then;\n        const speed = this.state.speed;\n        if(now - then > speed) {\n            this.setState((state, props) => ({\n                frame: state.frame + 1,\n                then: now \n            }), this.draw);\n        }\n    }\n\n    render() {\n        var style = {\n            border: \"12px solid #c19a6b\",\n            boxSizing:\"border-box\",\n            borderRadius: \"12px\",\n        }\n        var canvas = <canvas ref=\"canvas\" onClick={this.handleClick} width={this.state.width} height={this.state.height} style={style}></canvas>;\n        return canvas;\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            nthreads: 8,\n            ncurves: 3,\n            threadCount: 50,\n            speed: 64,\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.change_nthreads = this.change_nthreads.bind(this);\n        this.change_ncurves = this.change_ncurves.bind(this);\n        this.change_threadCount = this.change_threadCount.bind(this);\n        this.change_speed = this.change_speed.bind(this);\n    }\n\n    handleClick() {\n        this.refs.cloth.handleClick();\n    }\n\n    change_nthreads(event) {\n        var value = event.target.value;\n        this.setState({nthreads: value}, () => {\n            this.refs.cloth.setState({numThreads: value}, () => {\n                this.refs.cloth.generatePaths()\n            });\n        });\n    }\n\n    change_ncurves(event) {\n        var value = event.target.value;\n        this.setState({ncurves: value}, () => {\n            this.refs.cloth.setState({numCurves: value}, () => {\n                this.refs.cloth.generatePaths()\n            });\n        });\n    }\n\n    change_threadCount(event) {\n        this.setState({threadCount: event.target.value});\n        this.refs.cloth.setState({threadCount: event.target.value}, () =>\n            this.refs.cloth.regenerate()\n        );\n    }\n\n\n    change_speed(event) {\n        this.setState({speed: event.target.value});\n        this.refs.cloth.setState({speed: event.target.value}, () =>\n            this.refs.cloth.regenerate()\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"full\">\n                <Cloth ref=\"cloth\" nthreads={this.state.nthreads} ncurves={this.state.ncurves} threadCount={this.state.threadCount} speed={this.state.speed}/>\n                <div style={{float: \"left\"}} className=\"card\">\n                    <div className=\"form-group\">\n                        <label>numerosity</label>\n                        <input ref=\"nthreads\" type=\"range\" className=\"form-control-range\" min=\"1\" max=\"20\" value={this.state.nthreads} onChange={this.change_nthreads} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>travelness</label>\n                        <input ref=\"ncurves\" type=\"range\" className=\"form-control-range\" min=\"2\" max=\"10\" value={this.state.ncurves} onChange={this.change_ncurves} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>luxurity</label>\n                        <input ref=\"threadCount\" type=\"range\" className=\"form-control-range\" min=\"1\" max=\"250\" value={this.state.threadCount} onChange={this.change_threadCount} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>relaxedness</label>\n                        <input ref=\"speed\" type=\"range\" className=\"form-control-range\" min=\"16\" max=\"1000\" value={this.state.speed} onChange={this.change_speed} />\n                    </div>\n \n                    <button onClick={this.handleClick} className=\"btn btn-primary\" type=\"button\">new threads</button>\n                </div>\n\n            </div>\n          );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}